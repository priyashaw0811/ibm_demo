

CREATE COMPUTE MODULE Error_handler_subflow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- Continue exceution even if any error occurs
        DECLARE CONTINUE HANDLER FOR SQLSTATE LIKE '%' BEGIN END;

		DECLARE cMessageText        CHARACTER SQL.MessageFlowLabel || '.' ||SQL.NodeLabel ||'.'||SQL.BrokerName||'.'||SQL.ExecutionGroupLabel;
	    DECLARE rInputExceptionList REFERENCE TO InputExceptionList;
	    DECLARE rPtrException       REFERENCE TO rInputExceptionList.*[1];
	    DECLARE iInsertTextCountMax INTEGER 0;
	    DECLARE iErrorCount         INTEGER 1;
	    DECLARE iindex         INTEGER 1;
	    DECLARE inExceptionBLOB     BLOB;
	    DECLARE iMsg,iMsg1 CHARACTER '';
        
        WHILE LASTMOVE(rPtrException) AND rPtrException.Number IS NOT NULL DO
       		 MOVE rPtrException LASTCHILD;
  		END WHILE;

	    --  We moved too deep an need to go one up!
	    IF rPtrException.Number IS NULL THEN
	        MOVE rPtrException PARENT;
	    END IF;
	
	    -- Reached LastChild of the ExceptionList
	    IF rPtrException.Number IS NOT NULL THEN
	        -- Store the current values for the error number
	        IF rPtrException.Insert.*[1] IS NOT NULL THEN
	            SET iInsertTextCountMax = (SELECT COUNT(*) FROM rPtrException.Insert[]);
	            SET iMsg = rPtrException.Text;
	            SET iMsg1 = rPtrException.[<];
	        END IF;
	    END IF;
	    

        
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
